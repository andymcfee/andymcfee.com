<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>andymcfee.com</title>
    <description>Front-end, Design and UX</description>
    <link>http://andymcfee.com</link>
    <atom:link href="http://andymcfee.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>CSS Columns in the Wild</title>
        <description>&lt;p&gt;From a UX perspective, CSS3 columns can be dangerous. People instincitively want to layout content in columns because &amp;#8220;that&amp;#8217;s how newspapers do it.&amp;#8221; And it works for newspaper and magazines because their medium has a fixed width and columns help to make content more readable on a page. However, in the digital world, when a user reads to the bottom of a column they have to scroll back to the top to continue reading. That&amp;#8217;s a bad UX.&lt;/p&gt;

&lt;p&gt;Which has led me to wonder: when &lt;em&gt;could&lt;/em&gt; I use CSS columns? Well, I think I&amp;#8217;ve found my first reasonable use case for them.&lt;/p&gt;

&lt;h1 id='too_much_space'&gt;Too Much Space&lt;/h1&gt;

&lt;p&gt;Responsive grids are great. The main idea behind a responsive grid is that you have a column-based grid which stacks the columns at smaller viewport widths.&lt;/p&gt;

&lt;p&gt;Take this three column layout:&lt;/p&gt;
&lt;div class='grid-contain'&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;First&lt;/h6&gt;
    &lt;ul&gt;
      &lt;li&gt;Hi, I'm list item 1&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 2&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 3&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;Second&lt;/h6&gt;
    &lt;p&gt;I'm the second column&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;Third&lt;/h6&gt;
    &lt;p&gt;And I'm the third grid column.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Given enough room, the columns stack side-by-side. At smaller viewports, your layout will look more like this:&lt;/p&gt;
&lt;div class='grid-contain stack'&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;First&lt;/h6&gt;
    &lt;ul&gt;
      &lt;li&gt;Hi, I'm list item 1&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 2&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 3&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;Second&lt;/h6&gt;
    &lt;p&gt;I'm the second column&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;Third&lt;/h6&gt;
    &lt;p&gt;And I'm the third grid column.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&amp;#8230;well, the columns are now stacked, but there&amp;#8217;s a quite a bit of empty space in the First section, especially since my &lt;code&gt;li&lt;/code&gt; content is very short. It&amp;#8217;d be great if we could somehow magically spread that content across the container&amp;#8230;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ul {
  -webkit-column-count: 2;
  -moz-column-count: 2;
  -ms-column-count: 2;
  -o-column-count: 2;
  column-count: 2;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom. CSS Columns.&lt;/p&gt;
&lt;div class='grid-contain stack'&gt;
  &lt;div class='grid-col cols'&gt;
    &lt;h6&gt;First w/ CSS Cols&lt;/h6&gt;
    &lt;ul&gt;
      &lt;li&gt;Hi, I'm list item 1&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 2&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 3&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;Second&lt;/h6&gt;
    &lt;p&gt;I'm the second column&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class='grid-col'&gt;
    &lt;h6&gt;Third&lt;/h6&gt;
    &lt;p&gt;And I'm the third grid column.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Combined that with a media query to drop back down to one column when your viewport gets small enough, and you&amp;#8217;ve successfully used CSS3 columns!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; CSS Columns are supported in:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IE10+&lt;/li&gt;

&lt;li&gt;Chrome/Safari&lt;/li&gt;

&lt;li&gt;Firefox&lt;/li&gt;

&lt;li&gt;iOS Safari&lt;/li&gt;

&lt;li&gt;Android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So sorry, IE9 and down. My demos are going to look a little odd to you.&lt;/p&gt;

&lt;h1 id='but_in_the_real_world'&gt;But in the REAL World&amp;#8230;&lt;/h1&gt;

&lt;p&gt;OK, I cheated a bit. I used very short and simple content in my list items. When things aren&amp;#8217;t so clean you can end up with something like this:&lt;/p&gt;
&lt;div class='grid-contain stack' id='curtain1'&gt;
  &lt;div class='grid-col cols'&gt;
    &lt;h6&gt;First w/ CSS Cols&lt;/h6&gt;
    &lt;ul&gt;
      &lt;li&gt;Hi, I'm list item 1&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 2 and I'm obnoxiously long. Really, obnoxiously long.&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 3&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ouch. Nobody likes a list item that breaks across columns. It&amp;#8217;s ok, we can fix that by giving the &lt;code&gt;li&lt;/code&gt; a style of &lt;code&gt;display: inline-block&lt;/code&gt;&lt;/p&gt;
&lt;div class='grid-contain stack' id='curtain2'&gt;
  &lt;div class='grid-col cols'&gt;
    &lt;h6&gt;First w/ CSS Cols&lt;/h6&gt;
    &lt;ul&gt;
      &lt;li&gt;Hi, I'm list item 1&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 2 and I'm obnoxiously long. Really, obnoxiously long.&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 3&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Better. The &lt;code&gt;display: inline-block&lt;/code&gt; prevents the &lt;code&gt;li&lt;/code&gt; from breaking over columns, but we&amp;#8217;ve lost our bullet points (which came from the default styling of an &lt;code&gt;li&lt;/code&gt; to &lt;code&gt;display: list-item&lt;/code&gt;). But it&amp;#8217;s cool cause we all know how to use &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;, right?&lt;/p&gt;
&lt;div class='grid-contain stack' id='curtain3'&gt;
  &lt;div class='grid-col cols'&gt;
    &lt;h6&gt;First w/ CSS Cols&lt;/h6&gt;
    &lt;ul&gt;
      &lt;li&gt;Hi, I'm list item 1&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 2 and I'm obnoxiously long. Really, obnoxiously long.&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 3&lt;/li&gt;
      &lt;li&gt;Hi, I'm list item 4&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And there you have it. Nice, clean list columns with CSS. Just be sure your weary of the type/amount of content you use in columns. I swear, if I catch you using this on a list with 100 items&amp;#8230; If the user has to scroll when you are using columns, don&amp;#8217;t use columns.&lt;/p&gt;</description>
        <pubDate>Mon, 11 Mar 2013 00:00:00 +0100</pubDate>
        <link>http://andymcfee.com/2013/03/css-columns-in-the-wild/</link>
        <guid isPermaLink="true">http://andymcfee.com/2013/03/css-columns-in-the-wild/</guid>
      </item>
    
      <item>
        <title>Embedding CodePens into Jekyll Blogs</title>
        <description>&lt;p&gt;I love &lt;a href='http://codepen.io'&gt;CodePen&lt;/a&gt;. I also love &lt;a href='http://jekyllrb.com/'&gt;Jekyll&lt;/a&gt;. But apparently, they don&amp;#8217;t play well together out of the box. This was one of the few frustrations I had when moving my blog from WordPress to Jekyll. But fear not, for I have found a way to embed CodePens once more!&lt;/p&gt;

&lt;h1 id='out_of_async'&gt;Out of async&lt;/h1&gt;

&lt;p&gt;Well, the problem isn&amp;#8217;t Jekyll &lt;em&gt;specifically&lt;/em&gt;, it&amp;#8217;s actually Markdown. If your Jekyll blog is all in &lt;code&gt;.html&lt;/code&gt; files, then (I assume) you won&amp;#8217;t have this problem. But you write all you posts in Markdown now because it&amp;#8217;s 2013 and that&amp;#8217;s what all the cool kids are doing these days, right?&lt;/p&gt;

&lt;p&gt;Anyway, if you go to CodePen, copy your embed code and paste it into your post, it should look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre class=&amp;quot;codepen&amp;quot; data-height=&amp;quot;470&amp;quot; data-type=&amp;quot;result&amp;quot; data-href=&amp;quot;kjmBd&amp;quot; data-user=&amp;quot;andymcfee&amp;quot; data-safe=&amp;quot;true&amp;quot;&amp;gt;&amp;lt;code&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;a href=&amp;quot;http://codepen.io/andymcfee/pen/kjmBd&amp;quot;&amp;gt;Check out this Pen!&amp;lt;/a&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;script async src=&amp;quot;http://codepen.io/assets/embed/ei.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty simple, right? The problem is, when you try to generate your _site, you will get a parsing error that says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REXML could not parse this XML/HTML:
&amp;lt;script async src=&amp;quot;http://codepen.io/assets/embed/ei.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I don&amp;#8217;t know enough about how Markdown parses HTML and script tags to explain what&amp;#8217;s wrong here, but I do know that if you remove &lt;code&gt;async&lt;/code&gt; from the script tag, your REXML parsing problem will be solved.&lt;/p&gt;

&lt;h1 id='i_need_some_space'&gt;I need some space&lt;/h1&gt;

&lt;p&gt;Ok so now your page will render, but everything on your page after your newly embedded content will be broken. This is the result of &lt;a href='https://github.com/mojombo/jekyll/wiki/Markup-Problems'&gt;issue with the Maruku markdown engine&lt;/a&gt;, but there&amp;#8217;s an easy fix here too: just add a space inbetween &lt;strong&gt;all&lt;/strong&gt;* of your embedded tags (&lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;) like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;pre class=&amp;quot;codepen&amp;quot; data-height=&amp;quot;470&amp;quot; data-type=&amp;quot;result&amp;quot; data-href=&amp;quot;kjmBd&amp;quot; data-user=&amp;quot;andymcfee&amp;quot; data-safe=&amp;quot;true&amp;quot;&amp;gt; &amp;lt;code&amp;gt; &amp;lt;/code&amp;gt; &amp;lt;a href=&amp;quot;http://codepen.io/andymcfee/pen/kjmBd&amp;quot;&amp;gt;Check out this Pen!&amp;lt;/a&amp;gt; &amp;lt;/pre&amp;gt;
&amp;lt;script src=&amp;quot;http://codepen.io/assets/embed/ei.js&amp;quot;&amp;gt; &amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you go! Your CodePen is now embedded and should work just fine on your site.&lt;/p&gt;

&lt;h1 id='tldr'&gt;tl;dr&lt;/h1&gt;

&lt;p&gt;To embed CodePens onto your Jekyll-based blog using markdown syntax&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Remove &lt;code&gt;async&lt;/code&gt; from the script tag&lt;/li&gt;

&lt;li&gt;Put a space between &lt;strong&gt;every&lt;/strong&gt; embedded tag like so: &lt;code&gt;&amp;lt;code&amp;gt; &amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, enjoy this HTML/CSS Calculator Pen I&amp;#8217;ve been working on:&lt;/p&gt;
&lt;pre class='codepen' data-height='470' data-href='kjmBd' data-safe='true' data-type='result' data-user='andymcfee'&gt; &lt;code&gt; &lt;/code&gt; &lt;a href='http://codepen.io/andymcfee/pen/kjmBd'&gt;Check out this Pen!&lt;/a&gt; &lt;/pre&gt;&lt;script src='http://codepen.io/assets/embed/ei.js'&gt; &lt;/script&gt;</description>
        <pubDate>Mon, 25 Feb 2013 00:00:00 +0100</pubDate>
        <link>http://andymcfee.com/2013/02/embedding-codepens-into-jekyll-blogs/</link>
        <guid isPermaLink="true">http://andymcfee.com/2013/02/embedding-codepens-into-jekyll-blogs/</guid>
      </item>
    
      <item>
        <title>Reset</title>
        <description>&lt;p&gt;Well, I&amp;#8217;ve done it again. I&amp;#8217;ve redesigned my site/blog.&lt;/p&gt;

&lt;p&gt;Actually, I&amp;#8217;ve done much more than just redesign: I&amp;#8217;ve rebuilt my entire site using Jekyll. WordPress was just overkill for what I needed and Jekyll gives me so much more control over everything about my site.&lt;/p&gt;

&lt;p&gt;No more PHP. No more database. Just HTML, CSS and JS.&lt;/p&gt;

&lt;p&gt;Me likey.&lt;/p&gt;

&lt;h1 id='mobile_first_ftw'&gt;Mobile First FTW!&lt;/h1&gt;

&lt;p&gt;My only real goal I had in mind when I started working on this was that I wanted to commit to taking a &lt;a href='http://www.lukew.com/ff/entry.asp?933'&gt;Mobile First&lt;/a&gt; approach to both the design and development.&lt;/p&gt;

&lt;p&gt;Basically what that meant for this project was that I fired up Chrome, sized it down to it&amp;#8217;s smallest possible width (400px for whatever reason) and started coding/designing right in that browser. Once I had the home page and a blog post to a point where I was happy, I sized the browser up and started adding &lt;code&gt;min-width&lt;/code&gt; media queries to progressively enhance for larger viewports.&lt;/p&gt;

&lt;p&gt;And it felt good.&lt;/p&gt;

&lt;p&gt;All the break points are completely arbitrary and not set to match any specific device or viewport size.&lt;/p&gt;

&lt;h1 id='six_oclock__tv_hour_duh_duh_duh_duh_duh_dum_dum'&gt;Six o&amp;#8217;clock - TV hour. Duh duh duh duh duh dum dum&amp;#8230;&lt;/h1&gt;

&lt;p&gt;The other big innovation (for me anyway) is that I&amp;#8217;m using &lt;code&gt;rem&lt;/code&gt; units for (almost) &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This was scary at first but I think it paid off big time. The &lt;a href='http://caniuse.com/#search=rem'&gt;browser support&lt;/a&gt; for &lt;code&gt;rem&lt;/code&gt; units is wide enough now that it&amp;#8217;s pretty safe to use them even without a fall back. This means I&amp;#8217;m making the conscious decision to not support IE8. I&amp;#8217;m perfectly ok with that though.&lt;/p&gt;

&lt;p&gt;I originally used &lt;code&gt;rem&lt;/code&gt; units for my media queries, but apparently they don&amp;#8217;t work so well in media queries in Firefox (and I assume IE as well)&lt;/p&gt;

&lt;p&gt;So I&amp;#8217;m using &lt;code&gt;em&lt;/code&gt; units instead for media queries, which is still &lt;a href='http://blog.cloudfour.com/the-ems-have-it-proportional-media-queries-ftw/'&gt;really cool&lt;/a&gt; because it allows the browser to honor media queries when zooming in the browser.&lt;/p&gt;

&lt;p&gt;You can zoom way in and out of this page and see for yourself. Try making your browser really narrow, then zoom out and you should eventually get a &amp;#8220;wide screen&amp;#8221; layout.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s really cool actually. (assuming it works, let me know if you find any bugs)&lt;/p&gt;

&lt;h1 id='ready_set'&gt;Ready&amp;#8230; Set&amp;#8230;&lt;/h1&gt;

&lt;p&gt;The move to Jekyll wasn&amp;#8217;t completely painless. I didn&amp;#8217;t have much success with any of the &lt;a href='https://github.com/mojombo/jekyll/wiki/blog-migrations'&gt;conversion tools&lt;/a&gt; out there, but I only have a handful of blog posts so converting them manually was simple enough.&lt;/p&gt;

&lt;p&gt;The majority of my time was spent &amp;#8220;redesigning&amp;#8221; and by &amp;#8220;redesigning&amp;#8221; I mean constantly changing colors til I was happy.&lt;/p&gt;

&lt;p&gt;I finally made myself commit to where I&amp;#8217;m at now and push out an MVP version of my site, which I&amp;#8217;m actually pretty happy with. I&amp;#8217;ll add new pages/features/functionality as I have time to do so and I&amp;#8217;ll let it grow organically over time.&lt;/p&gt;

&lt;p&gt;But my goal is to not fully redesign again for a long time. At least a year or two. But I&amp;#8217;ll continue to modify and update as I go along.&lt;/p&gt;

&lt;h1 id='but_wait_theres_more'&gt;But wait, there&amp;#8217;s more!&lt;/h1&gt;

&lt;p&gt;So there are some pretty obvious things missing here such as&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A real home page&lt;/li&gt;

&lt;li&gt;Comments&lt;/li&gt;

&lt;li&gt;Nice code formatting&lt;/li&gt;

&lt;li&gt;Navigation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#8217;ll get to these things eventually, but for now you&amp;#8217;ll just have to live with just a blog.&lt;/p&gt;

&lt;p&gt;And in the interest of transparency, my entire blog is available on &lt;a href='https://github.com/andymcfee/andymcfee.com'&gt;GitHub&lt;/a&gt; for anyone to check out. If you&amp;#8217;re thinking of moving to or starting a Jekyll-based blog or site, have a look to see how things are structured.&lt;/p&gt;

&lt;p&gt;Well, that&amp;#8217;s all I&amp;#8217;ve got for now.&lt;/p&gt;</description>
        <pubDate>Mon, 18 Feb 2013 00:00:00 +0100</pubDate>
        <link>http://andymcfee.com/2013/02/reset/</link>
        <guid isPermaLink="true">http://andymcfee.com/2013/02/reset/</guid>
      </item>
    
      <item>
        <title>CSS3 Flip Cards</title>
        <description>&lt;p&gt;Every friday afternoon at Official.fm, we get to work on open source projects and things that interest us. The goal here is to take a mental break from the daily grind and put our skills to new uses.&lt;/p&gt;

&lt;p&gt;For my most recent project, I decided to make CSS &amp;#8220;Flip Cards.&amp;#8221; My goal was to create re-useable card-like elements that flip on hover (or tap!). Check it out:&lt;/p&gt;
&lt;pre class='codepen' data-height='430' data-href='eyahr' data-safe='true' data-type='result' data-user='andymcfee'&gt; &lt;code&gt; &lt;/code&gt; &lt;a href='http://codepen.io/andymcfee/pen/eyahr'&gt;Check out this Pen!&lt;/a&gt; &lt;/pre&gt;&lt;script src='http://codepen.io/assets/embed/ei.js'&gt; &lt;/script&gt;
&lt;p&gt;The HTML markup is fairly straight forward: each card is a container div (&lt;code&gt;.flip-card&lt;/code&gt;) with two children: &lt;code&gt;.card-front&lt;/code&gt; and &lt;code&gt;.card-back&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The CSS is where this party really starts&amp;#8230; There are a two main things happening here: &lt;code&gt;backface-visibility&lt;/code&gt; and &lt;code&gt;transform: rotate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and before you go on, be aware that I&amp;#8217;m just going to use the standard non-prefixed CSS3 properties in my examples. Check out the Codepen CSS for the Compass/SCSS version of what I&amp;#8217;m talking about here.&lt;/p&gt;

&lt;h3 id='baby_got_no_back'&gt;Baby got no back&lt;/h3&gt;

&lt;p&gt;Imagine a book sitting on a table in front of you. You pick up that book and set it down so that you can read the back. Now, imagine that the back of the book is invisible so you just see the table.&lt;/p&gt;

&lt;p&gt;This is exactly what the CSS3 property &lt;code&gt;backface-visibility&lt;/code&gt; allows you to do with any element. When set to &lt;code&gt;backface-visibility: hidden;&lt;/code&gt; the user will see the element as they normally would until the element is flipped around using a CSS transform.&lt;/p&gt;

&lt;p&gt;In my Flip Cards example, both &lt;code&gt;.card-front&lt;/code&gt; and &lt;code&gt;.card-back&lt;/code&gt; are set to &lt;code&gt;backface-visibility: hidden;&lt;/code&gt; and absolutely positioned to be on top of one another, but &lt;code&gt;.card-back&lt;/code&gt; is rotated 180 degrees along the Y-axis so its invisible back is showing. When you flip them both around simultaneously, &lt;code&gt;.card-front&lt;/code&gt; becomes invisible at the exact moment that &lt;code&gt;.card-back&lt;/code&gt; becomes visible.&lt;/p&gt;

&lt;p&gt;Sweet.&lt;/p&gt;

&lt;h3 id='every_now_and_then_i_get_a_little_bit_lonely'&gt;Every now and then I get a little bit lonely&lt;/h3&gt;

&lt;p&gt;Ok, so I lied a bit in that last part when I said that &lt;code&gt;.card-back&lt;/code&gt; was rotated 180° along the y-axis. It&amp;#8217;s actually rotated -180°.&lt;/p&gt;

&lt;p&gt;&amp;#8220;But Andy, Algebra 101! -180° is the same thing as 180°!&amp;#8221;&lt;/p&gt;

&lt;p&gt;How dare you take that tone of voice with me. Rotating an object from 180° to 0° along a y-axis rotates in the opposite direction that rotating from -180° to 0° would. Still confused? Here:&lt;/p&gt;
&lt;pre class='codepen' data-height='300' data-href='wvhmy' data-safe='true' data-type='result' data-user='andymcfee'&gt; &lt;code&gt; &lt;/code&gt; &lt;a href='http://codepen.io/andymcfee/pen/wvhmy'&gt;Check out this Pen!&lt;/a&gt; &lt;/pre&gt;&lt;script src='http://codepen.io/assets/embed/ei.js'&gt; &lt;/script&gt;
&lt;p&gt;I&amp;#8217;ve made the boxes wider and decreased the &lt;code&gt;perspective&lt;/code&gt; a bit to make it a bit more obvious what&amp;#8217;s going on here, but you should be able to tell that the back sides (&lt;code&gt;.card-back&lt;/code&gt;) in the &amp;#8220;bad&amp;#8221; examples rotate the wrong direction, breaking the illusion of a physical &amp;#8220;card&amp;#8221; rotating.&lt;/p&gt;

&lt;p&gt;Subtle, but important!&lt;/p&gt;

&lt;h3 id='but_can_i_use_it'&gt;But can I use it?&lt;/h3&gt;

&lt;p&gt;Yes. But don&amp;#8217;t expect it to work everywhere. It does degrade gracefully though. For the full 3D flip effect, you&amp;#8217;re going to need a Webkit browser like Chrome and Safari. In Firefox &amp;amp; IE10, the cards flip, but without any 3D effect. IE9 and down, the back side of the cards should just display by on hover because of the increased &lt;code&gt;z-index&lt;/code&gt; of &lt;code&gt;.card-back&lt;/code&gt; on hover.&lt;/p&gt;

&lt;p&gt;So there you have it. It&amp;#8217;s a neat little effect with plenty of potential uses. Now, go forth and start flipping some shit!&lt;/p&gt;</description>
        <pubDate>Fri, 24 Aug 2012 00:00:00 +0200</pubDate>
        <link>http://andymcfee.com/2012/08/css3-flip-cards/</link>
        <guid isPermaLink="true">http://andymcfee.com/2012/08/css3-flip-cards/</guid>
      </item>
    
      <item>
        <title>The Designer / Developer Conundrum</title>
        <description>&lt;p&gt;What do you call someone who designs and builds things for the web? Web designer? Front-end developer? Web designer/developer?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been trying to figure this one out for years now and I suspect I&amp;#8217;m not the only one. The web has grown and changed so much in the past few years that the lines between traditional roles for web people have been blurred. Sure, you still have graphic designers, back-end developers, front-end developers, etc. But what about those of us who fit right in the middle? Those of us who:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Design web sites or interface elements for the web&lt;/li&gt;

&lt;li&gt;Write HTML, CSS, jQuery and maybe a little JS&lt;/li&gt;

&lt;li&gt;Build responsive designs that adapt the web to phones, tablets, monitors, retina displays, TVs, refrigerators&amp;#8230;&lt;/li&gt;

&lt;li&gt;Ensure the web site/app is functional on any supported browser or device&lt;/li&gt;

&lt;li&gt;Love writing, rewriting and refactoring markup to make it cleaner, better and, gosh-darnit, more efficient&lt;/li&gt;

&lt;li&gt;And, most importantly, create memorable user experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I suppose the easy answer is a &amp;#8220;Web Designer/Front-end Developer.&amp;#8221; But it doesn&amp;#8217;t &lt;em&gt;feel&lt;/em&gt; like two different jobs, so why does it require two &lt;em&gt;different&lt;/em&gt; titles? Where&amp;#8217;s the line between &amp;#8220;web designer&amp;#8221; and &amp;#8220;front-end developer&amp;#8221;? When I&amp;#8217;m tweaking a CSS gradient to get it just right, am I designing or developing? When I write a SASS mixin to style buttons across my site, am I designing or developing?&lt;/p&gt;

&lt;p&gt;I think this lack of definition is why you find so many people calling themselves things like &amp;#8220;CSS Ninja&amp;#8221;, &amp;#8220;Web Guru&amp;#8221; and other abstract titles. While I don&amp;#8217;t mind these creative titles, I would like for the web industry to establish a bit more definition and consistency in labeling the role of the designer/developer (D/D from here on out).&lt;/p&gt;

&lt;h4 id='integrator'&gt;Integrator&lt;/h4&gt;

&lt;p&gt;Let&amp;#8217;s just get this one out of the way first. Integrator: one who integrates a designer&amp;#8217;s mockup into a web site. I&amp;#8217;d rather be called &amp;#8220;Markup Slave&amp;#8221;. Or intern. This one&amp;#8217;s really only half serious and I&amp;#8217;m probably making a bigger deal out of it than I should, but to be thought of as an &amp;#8220;integrator&amp;#8221; or a go-between for a design team and a dev team minimizes what we do and implies that your role is simply to take input and generate output. No creativity. No freedom. Take this. Make that. Rinse. Repeat.&lt;/p&gt;

&lt;p&gt;The sad part is this is often how D/Ds are viewed by those who don&amp;#8217;t fully understand our role and value to an organization, especially in smaller companies.&lt;/p&gt;

&lt;p&gt;/rant&lt;/p&gt;

&lt;h4 id='frontend_developer'&gt;Front-end Developer&lt;/h4&gt;

&lt;p&gt;If you work on a tech team and you are primarily responsible for writing HTML/CSS/JS, this is probably your title. Front-end developers usually have expert knowledge of HTML, CSS and JS. Front-end dev job postings often require strong knowledge JS, not just libraries like jQuery. This is where I have a problem with the front-end developer title for a D/D. I would wager that while most D/Ds can at least write some basic jQuery, their &amp;#8220;pure JS&amp;#8221; skills are usually not so great. Front-end developer just excludes too much of the design/creative side of a D/D and one could make an argument that it&amp;#8217;s really a completely different role than a D/D role altogether.&lt;/p&gt;

&lt;h4 id='ui_designer'&gt;UI Designer&lt;/h4&gt;

&lt;p&gt;I believe this is the most common answer to the problem. UI Designer gets right to the point: you design user interfaces. It distinguishes you from a traditional graphic designer and usually implies a solid understanding of at least HTML &amp;amp; CSS. Not bad. A bit more focused on the design side, but I think any really great UI designer is going to be able to turn their designs into functioning mockups if not final products.&lt;/p&gt;

&lt;h4 id='interface_developer'&gt;Interface Developer&lt;/h4&gt;

&lt;p&gt;This one came at the suggestion of &lt;a href='https://twitter.com/randyjensen'&gt;@randyjensen&lt;/a&gt;, whose self-title of &lt;a href='http://www.randyjensen.com/'&gt;Interaction Philanthropist and Designoper&lt;/a&gt; I love, after he asked his front-end dev followers to share their business card title. I chimed in with &amp;#8220;UI Designer/Front-end developer&amp;#8221; and he suggested &amp;#8220;Interface Developer&amp;#8221; as a compromise. I immediately loved it. Why didn&amp;#8217;t I think of that? &amp;#8220;UI Developer&amp;#8221; would also be nice just to bring the user back into the equation.&lt;/p&gt;

&lt;p&gt;Both are quite unique and I wouldn&amp;#8217;t be surprised to see an increase in their popularity in the coming years as CSS3 and eventually CSS4 continue to blur the line between interaction development and UI design.&lt;/p&gt;

&lt;h4 id='survey_says'&gt;Survey says&amp;#8230;&lt;/h4&gt;

&lt;p&gt;We design and we develop and it&amp;#8217;s hard to pick a single title that encompasses it all without using ye ole &amp;#8221;/&amp;#8221;. Personally, I like either UI Designer or UI Developer, depending on where your strengths lie. They both work well as an accurate label for a D/D. Or, if you think I&amp;#8217;m psychotic for writing this tirade against using a &amp;#8221;/&amp;#8221; in your title, then go with UI Designer/Developer. Or something else entirely.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s always &amp;#8220;Webmaster&amp;#8221;&amp;#8230;&lt;/p&gt;

&lt;p&gt;If you fall into the D/D middle ground, leave a comment and let me know your actual business card title as well as how you would refer to yourself your personal about page.&lt;/p&gt;</description>
        <pubDate>Fri, 03 Aug 2012 00:00:00 +0200</pubDate>
        <link>http://andymcfee.com/2012/08/the-designerdeveloper-conundrum/</link>
        <guid isPermaLink="true">http://andymcfee.com/2012/08/the-designerdeveloper-conundrum/</guid>
      </item>
    
      <item>
        <title>CSS3 Toggle Switch - A UI Alternative to Checkboxes</title>
        <description>&lt;p&gt;Recently, the adjacent selector (+) and I have become the best of friends. When first I learned of the adjacent selector back in the day, I found little use for simply targeting the element next to another element in my markup. However, once I realized that, when used with psudeo-class selectors such as :checked, the adjacent selector can be quite powerful, a whole world of opportunities opened up.&lt;/p&gt;

&lt;p&gt;One idea I had was to make a toggle switch using a checkbox, a label and an adjacent selector. Here is what I came up with:&lt;/p&gt;
&lt;pre class='codepen' data-height='530' data-href='rlntf' data-safe='true' data-type='result' data-user='andymcfee'&gt; &lt;code&gt; &lt;/code&gt; &lt;a href='http://codepen.io/andymcfee/pen/rlntf'&gt;Check out this Pen!&lt;/a&gt; &lt;/pre&gt;&lt;script src='http://codepen.io/assets/embed/ei.js'&gt; &lt;/script&gt;
&lt;h1 id='whats_going_on_up_there'&gt;What&amp;#8217;s going on up there?&lt;/h1&gt;

&lt;p&gt;Basically, I have a slider built with 3 parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;slider-viewport: a declared width window (with overflow: hidden) through which we view the slider.&lt;/li&gt;

&lt;li&gt;slider: 200% width relative to the viewport.&lt;/li&gt;

&lt;li&gt;slider-content: two slider children each set to 50% width relative to the slider. Also, a purely aesthetic slider-button.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The whole slider is in a label tag that immediately follows an input checkbox. When the checkbox is unchecked, it displays the first slider-content div. When the checkbox is checked, the CSS targets the adjacent label (and it&amp;#8217;s children) to slide the slider div to the left and display the second slider-content. Since it&amp;#8217;s all in a label with a &amp;#8220;for&amp;#8221; attribute, the whole thing can be clicked to toggle the checkbox, which is hidden with &amp;#8220;display:none;&amp;#8221;&lt;/p&gt;

&lt;p&gt;If it sounds a bit complicated, just dig into the Dabblet above and mess around a bit.&lt;/p&gt;

&lt;h1 id='but'&gt;But&amp;#8230;&lt;/h1&gt;

&lt;p&gt;Now, a disclaimer: it looks best in Firefox. BOOO! HISSS! Y U NO CROSS-BROWSER!? YOU SUCK! &amp;#8230;done? Well, let&amp;#8217;s back up for a second.&lt;/p&gt;

&lt;p&gt;This is the first time I have EVER used ONLY a -moz selector without matching -webkit, W3C, etc selectors. And there&amp;#8217;s a reason for it: there&amp;#8217;s a &lt;a href='https://bugs.webkit.org/show_bug.cgi?id=54189' title='webkit bug'&gt;nasty little bug&lt;/a&gt; in webkit where an element with a border-radius and &amp;#8220;overflow: hidden&amp;#8221; will not clip children content outside the rounded corners.&lt;/p&gt;

&lt;p&gt;Want to test the bug out? Uncomment the border-radius and border declarations in the Dabblet CSS above in Chrome of Safari. You&amp;#8217;ll see it.&lt;/p&gt;

&lt;p&gt;Anyway, the bug only effects my nice rounded corners and has nothing to do with the actual toggle effect so really it&amp;#8217;s more of a progressive enhancement. Shame on webkit nevertheless. Fix this bug please!&lt;/p&gt;

&lt;p&gt;Well, I hope this has been educational.&lt;/p&gt;</description>
        <pubDate>Tue, 01 May 2012 00:00:00 +0200</pubDate>
        <link>http://andymcfee.com/2012/05/css3-toggle-switch-a-ui-alternative-to-checkboxes/</link>
        <guid isPermaLink="true">http://andymcfee.com/2012/05/css3-toggle-switch-a-ui-alternative-to-checkboxes/</guid>
      </item>
    
      <item>
        <title>Icon Fonts, Pseudo-Elements and IE8</title>
        <description>&lt;p&gt;I love icon fonts. Who doesn&amp;#8217;t? Nobody. That&amp;#8217;s who. They are just super and they pretty much work in every browser (&lt;a href='http://www.webfonts.info/wiki/index.php?title=@font-face_browser_support'&gt;IE has supported @font-face since IE 4&lt;/a&gt;! Chew on that for a while.) and I could talk about them for hours, but that&amp;#8217;s not why I&amp;#8217;m writing this post. No, I&amp;#8217;m writing this because of an oddly prominent bug I&amp;#8217;ve encountered with icon fonts and IE8 and pseudo elements.&lt;/p&gt;

&lt;h1 id='icon_fonts_101'&gt;ICON FONTS 101&lt;/h1&gt;

&lt;p&gt;But first, let&amp;#8217;s set the stage. Like I said, icon fonts are just swell. For example, once I have created my icon font, I just use @font-face to include my font files on my site and create a class to use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@font-face {
  font-family: &amp;#39;MyIconFont&amp;#39;;
  src: url(&amp;#39;MyIconFont.eot?&amp;#39;) format(&amp;#39;eot&amp;#39;),
       url(&amp;#39;MyIconFont.woff&amp;#39;) format(&amp;#39;woff&amp;#39;),
       url(&amp;#39;MyIconFont.ttf&amp;#39;) format(&amp;#39;truetype&amp;#39;);
}
.icon {font-family: &amp;#39;MyIconFont&amp;#39;;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I&amp;#8217;m good to go. Now let&amp;#8217;s say, for example, that I have made the letter &amp;#8220;A&amp;#8221; in my font display an &amp;#8220;Apple&amp;#8221; icon. This would then create an &amp;#8220;Apple&amp;#8221; icon on my page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;icon&amp;quot;&amp;gt;A&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And it works. Like a charm. On just about any browser. Even IE8. SUPER!&lt;/p&gt;

&lt;h1 id='enter_pseudoelements'&gt;ENTER PSEUDO-ELEMENTS&lt;/h1&gt;

&lt;p&gt;Ok, great. But this font is for icons and not normal text so you don&amp;#8217;t want random letters in your markup do you? No, of course you don&amp;#8217;t. It&amp;#8217;s messy and unnecessary and just plain wrong. So, as you probably already guessed, you should do something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.icon {
  font-family: &amp;#39;MyIconFont&amp;#39;;
  font-size: 20px;
  color: #FF0;
}
.icon.apple:before    {content: &amp;#39;A&amp;#39;;}
.icon.twitter:before  {content: &amp;#39;B&amp;#39;;}
.icon.facebook:before {content: &amp;#39;C&amp;#39;;}
.icon.email:before    {content: &amp;#39;D&amp;#39;;}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;#8230;where each icon that is defined in your font (&amp;#8220;Apple&amp;#8221;) has its own semantic class name (.apple) which appends the corresponding letter (&amp;#8221;A&amp;#8221;) using the :before pseudo-element. This can also be done using data-attributes, but I prefer this method. Personal preference. So now, your markup should look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span class=&amp;quot;icon apple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you are left with an apple icon. This is more or less the basic technique for using icon fonts. But don&amp;#8217;t take my word for it, check out this &lt;a href='http://css-tricks.com/examples/IconFont/' title='Icon Fonts are Awesome'&gt;fantastic icon font demo page&lt;/a&gt; built by CSS-Trick&amp;#8217;s Chris Coyier.&lt;/p&gt;

&lt;h1 id='the_pseudoelementfont_conflict'&gt;THE PSEUDO-ELEMENT/FONT CONFLICT&lt;/h1&gt;

&lt;p&gt;So what&amp;#8217;s the problem? IE8. Yes, IE8 supports @font-face and IE8 supports the :before pseudo-element. But IE8 does NOT like when you try to use them together. Don&amp;#8217;t believe me? Why don&amp;#8217;t you just fire-up IE8 (to Browserstack!) and head over to the &lt;a href='http://css-tricks.com/examples/IconFont/' title='Icon Fonts are Awesome'&gt;fantastic icon font demo page&lt;/a&gt; I mentioned above.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s that? It works for you? Great. It worked for me to. Now click on the refresh button. HAH! You SEE!? Try leaving your mouse outside browser frame. Now hover your mouse over the body. Are you seeing this too!?&lt;/p&gt;

&lt;p&gt;For those of you not following along at home, let me explain what&amp;#8217;s happening: when the user loads the page in IE8 for the first time, the page more than likely renders just fine with all of the icons appearing normally like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt='ie8 icons good' src='/img/icons-good.jpg' /&gt;&lt;/p&gt;

&lt;h6 id='this_is_how_the_page_looks_in_ie8_on_the_initial_page_load_all_the_icons_appear_normally'&gt;This is how the page looks in IE8 on the initial page load. All the icons appear normally.&lt;/h6&gt;

&lt;p&gt;But when the user refreshes the page, the icons disappear and only the :before pseudo-element letters appear (see image below) UNTIL the user hovers back over the body of the page. Then all the icons magically reappear.&lt;/p&gt;

&lt;p&gt;&lt;img alt='Bad IE8 Font Icons' src='/img/icons-bad.jpg' /&gt;&lt;/p&gt;

&lt;h6 id='if_the_user_refreshes_the_page_and_leaves_the_cursor_outside_of_the_body_of_the_page_icons_wont_render_once_the_user_hovers_over_the_page_again_all_fonts_will_reappear'&gt;If the user refreshes the page and leaves the cursor outside of the body of the page, icons won&amp;#39;t render. Once the user hovers over the page again, all fonts will reappear.&lt;/h6&gt;

&lt;h1 id='wtf_mate'&gt;WTF, MATE?&lt;/h1&gt;

&lt;p&gt;Honestly, I don&amp;#8217;t know. From what I can tell, IE8 waits to render a font after the whole page has loaded (or at least all font files have downloaded). And when the page is reloaded, the cached page loads faster than the font and IE8 doesn&amp;#8217;t trigger loading the font until the user interacts with the page i.e.(pun totally intended) the user hovers over the body of the page. Best case scenario, this creates a Flash of Unstyled Content when the user refreshes via a keyboard shortcut. Worst case, well you have random letters all over the place.&lt;/p&gt;

&lt;p&gt;This is a problem I&amp;#8217;ve been struggling with for weeks at Official.fm. Our HTML5 player relies heavily (read: entirely) on an icon font for everything. Play/skip/back buttons, social icons, navigation icons, etc.  And when you try to reload (or even just load sometimes) the player in IE8, well&amp;#8230;&lt;/p&gt;

&lt;p&gt;&lt;img alt='LETTERS EVERYWHERE' src='http://i.qkme.me/3om838.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;The only &amp;#8220;solution&amp;#8221; we&amp;#8217;ve come up with is not using the :before pseudo-class in IE8 and instead, dynamically injecting the letters via JS. It&amp;#8217;s a ridiculous work around but it&amp;#8217;s the only way we can get the icons to render properly in IE8.&lt;/p&gt;

&lt;p&gt;So there you go. With the recent rise in the popularity of icon fonts, I don&amp;#8217;t know why I haven&amp;#8217;t heard of more people having this problem. Fortunately, IE8 is on it&amp;#8217;s way out and every single day, this becomes less and less of an issue as more and more people dump IE8 and transition to truly modern browsers (IE9, don&amp;#8217;t get too excited, I&amp;#8217;m not talking to you).&lt;/p&gt;</description>
        <pubDate>Wed, 04 Apr 2012 00:00:00 +0200</pubDate>
        <link>http://andymcfee.com/2012/04/icon-fonts-pseudo-elements-and-ie8/</link>
        <guid isPermaLink="true">http://andymcfee.com/2012/04/icon-fonts-pseudo-elements-and-ie8/</guid>
      </item>
    
  </channel>
</rss>